version: "3"

set: [errexit, nounset, pipefail]
shopt: [globstar]

env:
  APP: wirelogd
  PREFIX:
    sh: echo ${PREFIX:-/usr/local}
  BINDIR:
    sh: echo ${BINDIR:-${PREFIX:-/usr/local}/bin}
  MANDIR:
    sh: echo ${MANDIR:-${PREFIX:-/usr/local}/share/man}
  SHAREDIR:
    sh: echo ${SHAREDIR:-${PREFIX:-/usr/local}/share/${APP:-wirelogd}}
  CGO_ENABLED: 0
  GOARCH:
    sh: go env GOARCH
  GOOS:
    sh: go env GOOS
  VERSION:
    sh: git describe --always --dirty
  BUILD_TARGETS:
    - linux/amd64
    - linux/arm64
    - darwin/amd64
    - darwin/arm64

tasks:
  init:
    desc: Initialize repositry
    cmds:
      - git config core.hooksPath .githooks
      - git config commit.template .gitmessage

  lint:
    desc: Lint Go files
    sources:
      - ./**/*.go
      - ./go.mod
      - ./go.sum
    cmds:
      - test -z $(goimports -l .)
      - go vet ./...
      - go fix ./...
      - staticcheck ./...
      - govulncheck ./...
      - golangci-lint run

  format:
    desc: Format Go files
    sources:
      - ./**/*.go
      - ./go.mod
      - ./go.sum
    cmd: goimports -w -l .

  bump:
    desc: Bump version
    preconditions:
      - cz --no-raise 3,21 bump --dry-run --changelog --changelog-to-stdout > ./_changelog.md
    cmd: cz --no-raise 3,21 bump --changelog --changelog-to-stdout > ./_changelog.md

  release:
    desc: Publish release
    cmds:
      - goreleaser release --clean --release-notes ./_changelog.md
      - defer: rm -rf _changelog.md

  test:
    desc: Run tests
    cmd: go test ./...

  update:
    desc: Update dependencies
    cmds:
      - go get -u all
      - go mod tidy

  build:
    desc: Build application
    sources:
      - ./**/*.go
      - ./go.mod
      - ./go.sum
    cmd: >-
      go build \
        -ldflags="-s -w -X 'main.version=${VERSION}'" \
        -o ./build/${APP}-${GOOS}-${GOARCH} \
        .

  build:all:
    desc: Build for all targets
    cmds:
      - for:
          var: BUILD_TARGETS
        cmd: >-
          export GOOS=$(echo {{.ITEM}} | cut -d/ -f1) ;
          export GOARCH=$(echo {{.ITEM}} | cut -d/ -f2) ;
          go build \
            -ldflags="-s -w -X 'main.version=${VERSION}'" \
            -o ./build/${APP}-${GOOS}-${GOARCH} \
            . ;

  clean:
    desc: Cleanup build files
    cmds:
      - rm -rf ./build/
      - rm -rf ./dist/

  install:
    desc: Install the application
    deps: ["go:build"]
    cmds:
      - install -Dm755 ./build/${APP}-${GOOS}-${GOARCH} ${BINDIR}/${APP}
      - install -Dm644 ./man/${APP}.1 ${MANDIR}/man1/${APP}.1
      - install -Dm644 ./contrib/config.json ${SHAREDIR}/config.json
      - install -Dm644 ./contrib/${APP}.service ${SHAREDIR}/${APP}.service
      - sed -i'' -e 's|/usr|${PREFIX}|g' ${SHAREDIR}/${APP}.service

  uninstall:
    desc: Uninstall the application
    cmds:
      - rm -rf ${BINDIR}/${APP}
      - rm -f ${MANDIR}/man1/${APP}.1
      - rm -f ${SHAREDIR}/*
      - rmdir --ignore-fail-on-non-empty ${BINDIR}
      - rmdir --ignore-fail-on-non-empty ${SHAREDIR}
      - rmdir --ignore-fail-on-non-empty ${MANDIR}/man1
      - rmdir --ignore-fail-on-non-empty ${MANDIR}
